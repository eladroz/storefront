---
import { type Product, getProducts } from 'storefront:client';
import { getProductStock } from '~/lib/products.ts';
import ProductCard from './ProductCard.astro';
import ProductCarousel, { MEASURED_ITEM_ID, GAP } from './ProductCarousel.tsx';
import { inplaceShuffle } from '~/lib/util.ts';

type Props = {
	heading: string;
	filterProducts?: (products: Product[]) => Product[];
	collectionId?: string;
};

const { heading, filterProducts = (products: Product[]) => products, collectionId } = Astro.props;
const productsResponse = await getProducts({
	query: {
		limit: 20,
		collectionId,
	},
});
let products = filterProducts(productsResponse.data?.items ?? []).filter(
	(product: Product) => getProductStock(product) > 0,
);
products = inplaceShuffle(products).slice(0, 8);
---

<ProductCarousel {heading} client:idle>
	<ul class="flex w-max pb-4" style={{ gap: GAP + 'px' }}>
		{
			products.map((product, idx) => (
				<li id={idx === 0 ? MEASURED_ITEM_ID : undefined} class="shrink-0 snap-start">
					<ProductCard {...product} class="w-72" imageLoading={idx === 0 ? 'eager' : 'lazy'} />
				</li>
			))
		}
	</ul>
</ProductCarousel>
